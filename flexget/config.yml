# Flexget (http://www.flexget.com) configuration file.
#
# Created by: Jeff Wilson <jeff@jeffalwilson.com>
# Available from: https://github.com/jawilson/dotfiles
#
# For more information, see the README.md
#

# Use the secrets plugin to separately store credentials, etc
secrets: secretfile.yml
templates:

  global:
#TODO send email?
#    email:
#      from: '{{ secrets.email.from }}'
#      to: '{{ secrets.email.to }}'
#      smtp_host: smtp.gmail.com
#      smtp_port: 587
#      smtp_login: true
#      smtp_username: '{{ secrets.email.from }}'
#      smtp_password: '{{ secrets.email.password }}'
#      smtp_tls: true
    if:
      - "'torrentleech' in url":
          deluge:
            path: "/media/data/torrent/inprogress/"
#            username: '{{ secrets.deluge.username }}'
#            password: '{{ secrets.deluge.password }}'
            main_file_only: yes # Ignore all but the file that is >90% of the torrent if it exists
            keep_subs: yes #include_subs: yes
#            port: 58847
      - "'torrentleech' not in url":
          deluge:
            path: "/media/data/torrent/inprogress/"
#            username: '{{ secrets.deluge.username }}'
#            password: '{{ secrets.deluge.password }}'
            main_file_only: yes # Ignore all but the file that is >90% of the torrent if it exists
            keep_subs: yes #include_subs: yes
#            port: 58846
    # Make there's 50GB free before adding more downloads
    free_space:
      path: /media/data
      space: 5
    # Make sure all filenames are Windows safe (for samba)
    pathscrub: windows
    make_rss:
      file: "/media/data/torrent/flexget.rss"
      days: -1
      items: 200
      link:
        - imdb_url
    # Most of these are the results of problem torrents I kept seeing still pop up, so I wholesale blocked them
    # RegExr (http://www.gskinner.com/RegExr/) is a great tool for testing regexes
    regexp:
      reject:
        - (s|d)ub(s|bed|lado)?\b: {from: title}                    # Block any subbed/dubbed/etc videos
        - \bspanish\b: {from: title}                          # Spanish releases kept cropping up
        - \b(duo|tri|quadri|tetra|penta)logy\b: {from: title} # Block series, only accept one at a time
        - \b3-?D\b: {from: title}                             # I don't have any 3D displays
        - \btrailer\b: {from: title}                          # I've gotten a few trailers that matched as movies. VERY annoying
        - \bR5\b: {from: title}                               # The following are poor quality types that somehow got through the quality
        - \bWEBSCR\b: {from: title}                           # features usually due to the title including a keyword like "720p" as well
        - Temporada: {from: title}                        # spanish dubbed
        - temporada: {from: title}                        # spanish dubbed
        - ESPA?OL: {from: title}                          # spanish dubbed
        - \bscreener\b: {from: title}
        - \bTS\b: {from: title}
        - \bCam\b: {from: title}
        - '{C_P}': {from: title}                              # The following are groups with poor quality releases
        - TrTd TeaM: {from: title}
        - \[TNTVillage\]: {from: title}
        - \[facepalm\]: {from: title}
#        - \bASAP\b: {from: title}
        - '265'
        - the.day.of.the.doctor                               # The following are titles that caused me issues from plugins
    # Require at least 10 seeds of any torrent
    torrent_alive:
      min_seeds: 10
      reject_for: 6 hours
    # Filter by filenames. Allow multiple video types and rar packs (but note if there is just a
    # single .rar file it won't be accepted)
    content_filter:
      require:
        - '*.avi'
        - '*.mkv'
        - '*.mpg'
        - '*.mpeg'
        - '*.mp4'
        - '*.r0*'
        - '*.part0*'
      reject:
        - 'password.txt'
    # Limit the frequency of requests to domains so they don't complain about
    # using a bot
    domain_delay:
      www.torrentleech.org: 10 seconds
      rss.torrentleech.org: 10 minutes
      bt-chat.com: 15 seconds
      torrentz.eu: 15 seconds
      torrentz.me: 15 seconds
      kat.ph: 15 seconds
      ezrss.it: 15 seconds
      h33t.com: 15 seconds
      showrss.info: 15 seconds
      torlock.eu: 15 seconds
      torlock.com: 15 seconds
      tokyotosho.info: 15 seconds
      torrenticity.com: 15 seconds
      nyaa.eu: 15 seconds
      thexem.de: 10 seconds
    # The Pirate Bay ssl certs always fail
    verify_ssl_certificates: no
    # Size and seed restrictions require real torrents
    magnets: no
    # torrentz' guys banned flexget users?
    headers:
      User-Agent: "Mozilla/5.0 (Windows NT 5.1; rv:16.0) Gecko/20100101 Firefox/16.0"

  # This template is a "global" template for all TV-related tasks.
  # We keep all of the RSS feeds that list tv-related torrents here
  # as well as where to check existing shows.
  tv-global:
    # This is a TON of feeds, you probably don't need so many, but why not?
    inputs:
#      - rss: { url: 'http://rss.torrentleech.org/{{ secrets.torrentleech.rss_key }}', other_fields: [category] } # Need account
      - rss: { url: 'https://kat.cr/usearch/verified%3A1%20category%3Atv/?rss=1', silent: yes }   # Kickass (TV)
      - rss: { url: 'http://www.torlock.com/television/rss.xml', silent: yes }  # TorLock (TV)
      - rss: { url: 'http://torrentz.eu/feed_verified?q=tv', silent: yes }      # Torrentz (Verified only, TV)
#      - rss: { url: 'http://torrentz.me/feed_verified?q=tv', silent: yes } #same as .eu
#      - rss: { url: 'http://ezrss.it/feed/', silent: yes }                      # EZRSS
      - rss: { url: 'https://eztv.ag/ezrss.xml', silent: yes }                      # EZRSS
#      - rss: { url: 'http://kat.torrenticity.com/tv/?rss=1', silent: yes }
#      - rss: { url: 'http://showrss.karmorra.info/feeds/all.rss', silent: yes } # Karmorra (All)
      - rss: { url: 'http://showrss.info/feeds/schedule/schedule.rss', silent: yes } # Karmorra (All)
#      - rss: { url: 'http://rss.bt-chat.com/?group=3', silent: yes }            # BT-Chat (EZTV)
#      - rss: { url: 'http://rss.bt-chat.com/?group=2', silent: yes }            # BT-Chat (VTV)
#      - rss: { url: 'http://rss.bt-chat.com/?cat=2', silent: yes }              # BT-Chat (category TV)
#      - rss: { url: 'http://rss.thepiratebay.se/208', silent: yes }            # The Pirate Bay (Highres - TV shows)
#      - rss: { url: 'http://rss.thepiratebay.se/205', silent: yes }
#      - rss: { url: 'http://h33t.com/rss', silent: yes }                        # H33T (better tracker list)
#      - rss: { url: 'http://h33t.to/rss', silent: yes }                        # H33T (better tracker list)
      - rss: { url: 'http://tokyotosho.info/rss.php?filter=1&entries=450', silent: yes }
      - rss: { url: 'http://www.nyaa.eu/?page=rss', silent: yes }
      - rss: { url: 'http://extratorrent.cc/rss.xml?cid=8&type=last', silent: yes } #same as extratorrent.com
      - rss: { url: 'http://www.torrentfunk.com/tv/rss.xml', silent: yes }
      - rss: { url: 'http://kickass.to/tv/?rss=1', silent: yes }
#      - rss: { url: 'http://www.monova.org/rss.php?type=catname&id=8', silent: yes }
#      - rss: { url: 'http://rss.thepiratebay.sx/200', silent: yes }
      - rss: { url: 'http://torrentz.eu/feed?q=housewives', silent: yes }
      - rss: { url: 'http://kickass.to/usearch/housewives/?rss=1', silent: yes }
      - rss: { url: 'http://torrentz.eu/feed?q=watch+what+happens+live', silent: yes }
#      - rss: { url: 'http://www.dailytvtorrents.org/rss/allshows', silent: yes }
      - rss: { url: 'http://showrss.info/feeds/all.rss', silent: yes } # Karmorra (All)
    if:
      - "has_field('category')":
          regexp:
            reject_excluding:
              - '^Episodes( HD)?$': {from: category}
    archive: [tv]
    # Impose reasonable size constraints
    content_size:
      max: 8000
      min: 20
    # Prevent from downloading shows that were aquired manually
    # or are currently downloading
    exists_series:
      - "/media/data/mythtv/videos/TV/"
      - "/media/data2/mythtv/videos/TV/"
      - "/media/data/mythtv/videos/premieres/"
      - "/media/data/mythtv/videos/unrar/staging/tv_shows/"
      - "/media/data/mythtv/videos/unrar/staging/tv_premieres/"
      - "/media/data/torrent/inprogress/"
    # Disabl TheXEM until the plugin is rewritten
    #thexem:
    #  source: scene
    #  destination: tvdb
    # Look up info on TheTVDB.com to fill in extra info
    thetvdb_lookup: yes
    trakt_lookup: yes
    require_field: [series_name, series_id]
    pushbullet:
      apikey: '{{ secrets.pushbullet.apikey }}'
      title: "[Flexget] {{task}}"
      body: "{{ tvdb_series_name|default(series_name) }} - {{ series_id }}{% if tvdb_ep_name|default(False) %} - {{ tvdb_ep_name }}{% endif %}\n{{ quality }}"
      url: "{% if trakt_series_slug is defined and trakt_season is defined and trakt_episode is defined %}https://trakt.tv/shows/{{ trakt_series_slug }}/seasons/{{ trakt_season }}/episodes/{{ trakt_episode }}{% endif %}"
    # Add accepted entries to Deluge and make sure they end up in the correct
    # folder with a nice name
    set:
      queuetotop: yes
      movedone: >
        /media/data/mythtv/videos/TV/{{ tvdb_series_name|default(series_name)|replace('/', '_')|replace(':', ' -')|replace(',', '') }}/{% if series_id_type == 'ep' %}Season {{ (tvdb_season|default(series_season))|pad(2) }}/{% endif %}
      # Rename the "content file" to something nice, use leading slash to force file to top level
      content_filename: >
        "/{{ tvdb_series_name|default(series_name)|replace('/', '_')|replace(':', ' -')|replace(',', '') }} - {% if series_id_type == 'ep' and thetvdb_lookup_season_offset|default(False) %}{{ "S%0.2dE%0.2d"|format((series_season + thetvdb_lookup_season_offset),series_episode) }}{% else %}{{ series_id }}{% endif %}{% if ep_name|default(False) %} - {{ ep_name|replace('/', '_')|replace(':', ' -')|replace(',', '') }}{% endif %} - {{ quality }}"
      label: tv
    # This is a custom plugin, it is part of my rar-unpacking method,
    # it changes 'movedone' based on the regexp in the key
    content_sort:
      '*.rar': '/media/data/mythtv/videos/unrar/completed/tv_shows/'
      '*.r01': '/media/data/mythtv/videos/unrar/completed/tv_shows/'


  tv-shows-find:
    discover:
      #no_entries_ok: yes
      what: [filler: yes] # Always produce entries
      from:
#        - torrentleech:
#            rss_key: '{{ secrets.torrentleech.rss_key }}'
#            username: '{{ secrets.torrentleech.username }}'
#            password: '{{ secrets.torrentleech.password }}'
#            category: ['Episodes HD', 'Episodes']
        - flexget_archive: [tv]
        - kat:
            category: tv
            verified: yes

  # This template is a "global" template for all movie-related tasks.
  # We keep all of the RSS feeds that list movie-related torrents here
  # as well as some other configurations.
  movies-global:
    inputs:
#      - rss: { url: 'http://rss.torrentleech.org/{{ secrets.torrentleech.rss_key }}', other_fields: [category] } # Need account
      - rss: { url: 'https://kat.cr/usearch/verified%3A1%20category%3Amovies/?rss=1', silent: yes } # Kickass (Movies)
      - rss: { url: 'http://www.torlock.com/movies/rss.xml', silent: yes }     # TorLock (Movies)
      - rss: { url: 'http://kickass.to/movies/?rss=1', silent: yes }
      - rss: { url: 'https://yts.ag/rss', silent: yes }
      - rss: { url: 'http://www.torrentfunk.com/movies/rss.xml', silent: yes }
      - rss: { url: 'http://extratorrent.com/rss.xml?cid=4&type=last', silent: yes }
      - rss: { url: 'http://torrentz.eu/feed_verified?q=movies', silent: yes } # Torrentz (Verified Movies)
#      - rss: { url: 'http://rss.thepiratebay.se/207', silent: yes }           # The Pirate Bay (Highres - Movies)
#      - rss: { url: 'http://rss.thepiratebay.se/201', silent: yes }           # The Pirate Bay (Highres - Movies)
#      - rss: { url: 'http://rss.thepiratebay.sx/200', silent: yes }
#      - rss: { url: 'http://www.monova.org/rss.php?type=catname&id=1', silent: yes }
    # Some feeds might include TV Shows, ignore them
    if:
      - "has_field('category')":
          regexp:
            reject_excluding:
              - '^(HD|BDRip|DVDRip.DVDScreener|DVD-R|Documentaries)$': {from: category}
    # Rotten Tomatoes is broken, possibly forever :(
    #rottentomatoes_lookup: '{{ secrets.rottentomatoes.api_key }}'
    archive: [movies]
    regexp:
      reject:
        - s\d+e\d+: {from: title}
        - '\d{4}.\d{2}.\d{2}': {from: title}
        - \d+x\d+: {from: title}
        - \baac2: {from: title} # No 2 channel audio
    # Force proper_movies to run after regexp to avoid unnecessary imdb_lookup
    plugin_priority:
      regexp: 176
      if: 177
      proper_movies: 171
    # Impose reasonable size constraints
    content_size:
      max: 20000
      min: 1000
    imdb_lookup: yes
    trakt_lookup: yes
#    seen_movies: strict # Don't download movies we've already seen
    # Check for already downloaded or currently downloading movies
    exists_movie:
      - /media/data/mythtv/videos/movies/_Movies/
      - /media/data2/mythtv/videos/movies/_Movies/
      - /media/data/mythtv/videos/unrar/staging/movies
      - /media/data/torrent/inprogress/
    # Download propers, since they will have the same content_filename,
    # lower/non-propers will be overwritten
    proper_movies: yes
    set:
      # Give folders/files nice names
      movedone: "/media/data2/mythtv/videos/movies/_Movies/{{ imdb_name|replace('/', '_')|replace(':', ' -')|replace(',', '') }} ({{ imdb_year }})"
      # Rename the "content file" to something nice, use leading slash to force file to top level
      content_filename: |
        "/{{ imdb_name|replace('/', '_')|replace(':', ' -')|replace(',', '') }} ({{ imdb_year }}) - {{ quality }}"
    pushbullet:
      apikey: '{{ secrets.pushbullet.apikey }}'
      title: "[Flexget] {{task}}"
      body: "{{ imdb_name }} ({{ imdb_year }})\n{{ quality }}"
      url: "{% if imdb_url %}{{ imdb_url }}{% endif %}"
    # This is a custom plugin, it is part of my rar-unpacking method, it changes
    # 'movedone' based on the regexp in the key
    content_sort:
      '*.rar': '/media/data/mythtv/videos/unrar/completed/movies/'
      '*.r01': '/media/data/mythtv/videos/unrar/completed/movies/'


  # Keep all the discover settings in one place
  movies-discover:
    discover:
      from:
#        - torrentleech:
#            rss_key: '{{ secrets.torrentleech.rss_key }}'
#            username: '{{ secrets.torrentleech.username }}'
#            password: '{{ secrets.torrentleech.password }}'
#            category: ['HD', 'BDRip', 'DVDRip', 'DVDR', 'Documentaries']
        - flexget_archive: [movies]
        - kat:
            category: movies
            verified: yes
        - torrentz:
            reputation: verified
            extra_terms: "movie* hd"
        - piratebay:
            category: "highres movies"
            sort_by: seeds
      what: [ filler: yes ] # Always produce entries


  # This template runs feeds through my very specific custom filter
  movies-auto:
    my_movie_filter: yes
    #template: movies-discover
    #discover:
    #  from: [ filler: yes ]
    #  what:
    #    - rottentomatoes_list:
    #        dvds:
    #          - top_rentals
    #          - new_releases
    set:
      queuetotop: no
      label: movies-auto


  # This template uses the movie queue to find movies from various sources
  movies-queued:
    movie_queue: accept
    template: movies-discover
    disable:
      - seen_movies
    discover:
      what:
        - emit_movie_queue: yes
      from: [ filler: yes ] # Always produce entries
    trakt_remove: # Remove from Trakt list when we accept an item
      username: '{{ secrets.trakt.username }}'
      account: '{{ secrets.trakt.account }}'
      list: Movie Queue
    trakt_add: # Add accepted item to my Trakt watchlist
      username: '{{ secrets.trakt.username }}'
      account: '{{ secrets.trakt.account }}'
      list: watchlist
    set:
      label: my-movies


# This is where we pull everything together
tasks:

  # Use a local folder (synced with Dropbox) as a source
  # I can drop torrents in this folder and they are synced with Dropbox, always
  # accepted, then the original file is deleted
  Local-Torrents-TV:
    priority: 1
    include:
      - series-favorite.yml
      - series-following.yml
      - series-daily.yml
      - series-ak.yml
    template:
      - tv-global
    disable:
      - seen
      - seen_info_hash
      - retry_failed
      - configure_series
      - trakt_list
      - inputs
      - exists_series
      - regexp
      - content_size
      - content_filter
      - torrent_alive
    all_series:
      parse_only: yes
    sequence:
      - configure_series:
          settings:
            assume_special: true
          from:
            trakt_list:
              username: '{{ secrets.trakt.username }}'
              account: '{{ secrets.trakt.account }}'
              list: Favorite TV
              type: shows
              strip_dates: yes
      - configure_series:
          settings:
            assume_special: true
          from:
            trakt_list:
              username: '{{ secrets.trakt.username }}'
              account: '{{ secrets.trakt.account }}'
              list: Following TV
              type: shows
              strip_dates: yes
      - configure_series:
          settings:
            assume_special: true
          from:
            trakt_list:
              username: '{{ secrets.trakt.username }}'
              account: '{{ secrets.trakt.account }}'
              list: Daily TV
              type: shows
              strip_dates: yes
      - configure_series:
          settings:
            assume_special: true
          from:
            trakt_list:
              username: '{{ secrets.trakt.username }}'
              account: '{{ secrets.trakt.account }}'
              list: AK TV
              type: shows
              strip_dates: yes
    plugin_priority:
      exec: 0
    filesystem:
      path: '/home/backend/Dropbox/torrents/TV'
      recursive: yes
      retrieve: files
      regexp: '.*\.torrent$'
    no_entries_ok: yes
    verify_ssl_certificates: no
    exec:
      on_output:
        for_accepted: rm "{{location}}"
    accept_all: yes
    set:
      label: local-tv


  # Same as above but for movies
  Local-Torrents-Movies:
    priority: 2
    template:
      - movies-global
      - movies-queued
    disable:
      - seen
      - seen_info_hash
      - retry_failed
      - discover
      - inputs
      - exists_movie
      - seen_movies
      - regexp
      - content_size
      - content_filter
      - torrent_alive
    plugin_priority:
      exec: 0
    filesystem:
      path: '/home/backend/Dropbox/torrents/Movies'
      recursive: yes
      retrieve: files
      regexp: '.*\.torrent$'
    no_entries_ok: yes
    exec:
      on_output:
        for_accepted: rm "{{location}}"
    accept_all: yes
    verify_ssl_certificates: no
    set:
      label: local-movies


  Sync-TV-Shows:
    manual: yes
    template: no_global # None of the global templates make sense here
    filesystem:
      path:
        - /media/data/mythtv/videos/TV/
        - /media/data/mythtv/videos/AK Shows/
      recursive: yes
      retrieve: files
      regexp: '.*\.(avi|mkv|mp4|mpg|m4v)$'
    regexp:
      reject:
        - \bsample\b: {from: title}
    disable: builtins
    thetvdb_lookup: yes
    # Disabl TheXEM until the plugin is rewritten
    #thexem:
    #  source: tvdb
    #  destination: scene
    include:
      - series-favorite.yml
      - series-following.yml
      - series-daily.yml
      - series-ak.yml
    sequence:
      - configure_series:
          settings:
            tracking: no
          from:
            trakt_list:
              username: '{{ secrets.trakt.username }}'
              account: '{{ secrets.trakt.account }}'
              list: Favorite TV
              type: shows
              strip_dates: yes
      - configure_series:
          settings:
            tracking: no
          from:
            trakt_list:
              username: '{{ secrets.trakt.username }}'
              account: '{{ secrets.trakt.account }}'
              list: Following TV
              type: shows
              strip_dates: yes
      - configure_series:
          settings:
            tracking: no
          from:
            trakt_list:
              username: '{{ secrets.trakt.username }}'
              account: '{{ secrets.trakt.account }}'
              list: Daily TV
              type: shows
              strip_dates: yes
      - configure_series:
          settings:
            tracking: no
          from:
            trakt_list:
              username: '{{ secrets.trakt.username }}'
              account: '{{ secrets.trakt.account }}'
              list: AK TV
              type: shows
              strip_dates: yes
    exec: echo "Found {{ series_name }} - {{ series_id }} ({{ location }})" >> /dev/null


  # All of the TV-related tasks pull in the tv-global template, this gives
  # all of the necessary rss sources and a few extra configs

  # There are 3 My-TV Shows tasks, the first, tries to get the most wanted qualities
  My-TV-Shows:
    priority: 10
    include:
      - series-favorite.yml
      - series-following.yml
      - series-daily.yml
    template: [tv-global]
    sequence:
      - configure_series:
          settings:
            target: 720p+ hdtv+
            timeframe: 5 days
#            quality: 720p+ dvdscr+
            tracking: backfill
          from:
            trakt_list:
              username: '{{ secrets.trakt.username }}'
              account: '{{ secrets.trakt.account }}'
              list: Favorite TV
              type: shows
              strip_dates: yes
      - configure_series:
          settings:
            target: 720p+ dvdscr+
            timeframe: 3 days
#            quality: 480p+ webrip+
            tracking: backfill
          from:
            trakt_list:
              username: '{{ secrets.trakt.username }}'
              account: '{{ secrets.trakt.account }}'
              list: Following TV
              type: shows
              strip_dates: yes
      - configure_series:
          settings:
            target: webrip+
            timeframe: 12 hours
#            quality: preair+
            tracking: backfill
          from:
            trakt_list:
              username: '{{ secrets.trakt.username }}'
              account: '{{ secrets.trakt.account }}'
              list: Daily TV
              type: shows
              strip_dates: yes
      - configure_series:
          settings:
            target: 720p+ dvdscr+
            timeframe: 3 days
#            quality: 480p+ webrip+
            tracking: backfill
          from:
            trakt_list:
              username: '{{ secrets.trakt.username }}'
              account: '{{ secrets.trakt.account }}'
              list: AK TV
              type: shows
              strip_dates: yes


  My-TV-Shows-Find-Next-Favorite:
    template: [tv-global, tv-shows-find]
    disable:
      - inputs
    discover:
      #no_entries_ok: yes
      interval: 2 hours
      what:
        - trakt_emit:
            username: '{{ secrets.trakt.username }}'
            account: '{{ secrets.trakt.account }}'
            context: collected
            position: next
            list: Favorite TV
            #aired_timeframe: 60 days
      from: [filler: yes]
    include: [ series-favorite.yml ]
    all_series:
      target: 720p+ hdtv+
      timeframe: 5 days
#      quality: 720p+ dvdscr+
      tracking: backfill


  My-TV-Shows-Find-Next-Following:
    template: [tv-global, tv-shows-find]
    disable:
      - inputs
    discover:
      #no_entries_ok: yes
      interval: 2 hours
      what:
        - trakt_emit:
            username: '{{ secrets.trakt.username }}'
            account: '{{ secrets.trakt.account }}'
            list: Following TV
            context: collected
            position: next
            #aired_timeframe: 60 days
        - trakt_emit:
            username: '{{ secrets.trakt.username }}'
            account: '{{ secrets.trakt.account }}'
            list: AK TV
            context: collected
            position: next
            #aired_timeframe: 60 days
      from: [filler: yes]
    include: [ series-following.yml, series-ak.yml ]
    all_series:
      target: 720p+ dvdscr+
      timeframe: 3 days
#      quality: 480p+ webrip+
      tracking: backfill


  My-TV-Shows-Find-Next-Daily:
    template: [tv-global, tv-shows-find]
    disable:
      - inputs
    discover:
      #no_entries_ok: yes
      interval: 2 hours
      what:
        - trakt_emit:
            username: '{{ secrets.trakt.username }}'
            account: '{{ secrets.trakt.account }}'
            list: Daily TV
            context: collected
            position: next
            #aired_timeframe: 14 days
      from: [filler: yes]
    include: [ series-daily.yml ]
    all_series:
      target: webrip+
      timeframe: 12 hours
#      quality: preair+
      tracking: backfill


  My-TV-Shows-Find-Missing:
    template:
      - tv-global
      - tv-shows-find
    disable:
      - inputs
      - est_movies
    discover:
      what:
        - emit_series:
            backfill: yes
      from: [filler: yes]
    include:
      - series-favorite.yml
      - series-following.yml
      - series-ak.yml
    sequence:
      - configure_series:
          settings:
            target: 720p+ hdtv+
            timeframe: 5 days
#            quality: 720p+ dvdscr+
            tracking: backfill
            propers: no
            upgrade: no
          from:
            trakt_list:
              username: '{{ secrets.trakt.username }}'
              account: '{{ secrets.trakt.account }}'
              list: Favorite TV
              type: shows
              strip_dates: yes
      - configure_series:
          settings:
            target: 720p+ dvdscr+
            timeframe: 3 days
#            quality: 480p+ webrip+
            tracking: backfill
            propers: no
            upgrade: no
          from:
            trakt_list:
              username: '{{ secrets.trakt.username }}'
              account: '{{ secrets.trakt.account }}'
              list: Following TV
              type: shows
              strip_dates: yes
      - configure_series:
          settings:
            target: 720p+ dvdscr+
            timeframe: 3 days
#            quality: 480p+ webrip+
            tracking: backfill
            propers: no
            upgrade: no
          from:
            trakt_list:
              username: '{{ secrets.trakt.username }}'
              account: '{{ secrets.trakt.account }}'
              list: AK TV
              type: shows
              strip_dates: yes


  # I'm always up for new shows, but some I genres I just can't stand. This
  # task grabs all of the premieres except for some genres
  Series-Premieres:
    priority: 40
    template:
      - tv-global
    # The entry has to have the tvdb_genres field so I can filter by it
    require_field:
      - tvdb_genres
      - tvdb_first_air_date
    # Make sure plenty of people are seeding it, otherwise it may not be that good
    torrent_alive:
      min_seeds: 50
    # Block these genres if they exist in the list of tvdb_genres at all
    regexp:
      reject:
#        - animation: {from: tvdb_genres}
#        - documentary: {from: tvdb_genres}
        - talk show: {from: tvdb_genres}
#        - family: {from: tvdb_genres}
        - game show: {from: tvdb_genres}
#        - musical: {from: tvdb_genres}
        - reality: {from: tvdb_genres}
#        - crime: {from: tvdb_genres}
        - children: {from: tvdb_genres}
        - soap: {from: tvdb_genres}
#        - special interest: {from: tvdb_genres}
#        - home and garden: {from: tvdb_genres}
    if:
      # Block these genres only if they are the ONLY genre listed in
      # tvdb_genres. For example, this will not block a show that's both
      # "Comedy" and "Drama" but it will block a show that is just "Drama"
#      - "tvdb_genres == ['Drama']": reject
#      - "series_season != 1": reject
#      - "series_episode != 1": reject
      # Block premieres that weren't within the last 60 days
      - tvdb_first_air_date and tvdb_first_air_date < now - timedelta(days=60): reject
    # Accept all series permieres
    series_premiere:
      timeframe: 3 days
      target: 720p+ hdtv+
      quality: webrip+
    # Add to deluge, but don't queue to top (My-TV-Shows are more important)
    # and put in a different location
    set:
      movedone: >
        /media/data/mythtv/videos/premieres/{{ tvdb_series_name|default(series_name)|replace('/', '_')|replace(':', ' -')|replace(',', '') }}/{% if series_id_type == 'ep' %}Season {{ (tvdb_season|default(series_season))|pad(2) }}/{% endif %}
      queuetotop: no
      label: tv-premiere
    # This is a custom plugin, it is part of my rar-unpacking method, it changes
    # 'movedone' based on the regexp in the key
    content_sort:
      '*.rar': '/media/data/mythtv/videos/unrar/completed/tv_premieres/'
      '*.r01': '/media/data/mythtv/videos/unrar/completed/tv_premieres/'

  # If a premier was grabbed, keep on tracking it until the directory is (re)moved
  Series-Premieres-Track:
    priority: 50
    template:
      - tv-global
    configure_series:
      settings:
        target: 720p+ hdtv+
        timeframe: 3 days
        quality: webrip+
      from:
        filesystem:
          path: "/media/data/mythtv/videos/premieres/"
          recursive: no
          retrieve: dirs
    set:
      movedone: >
        /media/data/mythtv/videos/premieres/{{ tvdb_series_name|default(series_name)|replace('/', '_')|replace(':', ' -')|replace(',', '') }}/{% if series_id_type == 'ep' %}Season {{ (tvdb_season|default(series_season))|pad(2) }}/{% endif %}
      queuetotop: no
      label: tv-premiere-track
    content_sort:
      '*.rar': '/media/data/mythtv/videos/unrar/completed/tv_premieres/'
      '*.r01': '/media/data/mythtv/videos/unrar/completed/tv_premieres/'


  # Cleans movies from the movie queue (and Trakt) that we already have
  Clean-Movie-Queue:
    priority: 90
    template: no_global # None of the global templates make sense here
    disable:
      - seen
      - seen_info_hash
      - seen_movies
    accept_all: yes
    filesystem:
      path:
        - /media/data/mythtv/videos/movies/_Movies/
        - /media/data2/mythtv/videos/movies/_Movies/
      recursive: no
      retrieve: dirs
    imdb_lookup: yes
    tmdb_lookup: yes
    # Rotten Tomatoes is broken, possibly forever :(
    #rottentomatoes_lookup: '{{ secrets.rottentomatoes.api_key }}'
    require_field: [movie_name, movie_year]
    movie_queue: accept
    trakt_remove:
      username: '{{ secrets.trakt.username }}'
      account: '{{ secrets.trakt.account }}'
      list: Movie Queue


  # This task queues all of the movies in my IMDB watchlist & Trakt "Movie Queue" playlist
  Movie-Queue:
    priority: 100 # Always run before My-Movies task
    template: no_global # None of the global templates make sense here
    imdb_list:
      login: '{{ secrets.imdb.login }}'
      password: '{{ secrets.imdb.password }}'
      list: watchlist
    trakt_list:
      username: '{{ secrets.trakt.username }}'
      account: '{{ secrets.trakt.account }}'
      list: Movie Queue
      type: movies
    no_entries_ok: yes
    accept_all: yes
    movie_queue: add


  # The next two tasks download the queue from the previous task effectively implementing
  # a 2 day timeframe for 1080p movies, then falls back to 720p
  My-Movies-1080p:
    priority: 110
    template:
      - movies-global
      - movies-queued
    quality: 1080p+ bluray+ h264+ truehd|dtshd|dd5.1|dts


  My-Movies-720p:
    priority: 120
    template:
      - movies-global
      - movies-queued
    quality: 720p+ dvdrip+ xvid+ truehd|dtshd|dd5.1|dts|ac3
    torrent_alive:
      min_seeds: 5
    delay: 28 days # Wait 28 days for a 1080p movie before trying downloading 720p


  # These task implement the movies-auto template
  Auto-Movies-1080p:
    priority: 130
    quality: 1080p+ bluray+ h264+ truehd|dtshd|dd5.1|dts
    template:
      - movies-global
      - movies-auto
    set:
      label: movies-auto

  Auto-Movies-720p:
    priority: 140
    quality: 720p+ dvdrip+ xvid+ truehd|dtshd|dd5.1|dts|ac3
    template:
      - movies-global
      - movies-auto
    set:
      label: movies-auto
    delay: 14 days # Wait 14 days for a 1080p movie before trying downloading 720p


schedules:

  #
  # Local
  #
  - tasks: [ 'Local-Torrents-*' ]
    interval:
      minutes: 15

  #
  # Series
  #
  - tasks: [ 'My-TV-Shows-Find-Next-*' ]
    interval:
      hours: 2
  - tasks: [ 'My-TV-Shows', 'Series-Premieres-Track' ]
    schedule:
      minute: 3,18,33,48
  - tasks: [ 'My-TV-Shows-Find-Missing' ]
    interval:
      days: 3
  - tasks: [ 'Series-Premieres' ]
    interval:
      hours: 2

  #
  # Movies
  #
  - tasks: [ 'Movie-Queue', 'My-Movies-*' ]
    interval:
      hours: 1

  #- tasks: [ 'Auto-Movies-*' ]
  #  interval:
  #    hours: 2

  - tasks: [ 'Clean-Movie-Queue' ]
    interval:
      weeks: 1
