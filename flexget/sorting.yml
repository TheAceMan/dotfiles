# Flexget (http://www.flexget.com) configuration file.
#
# Created by: Jeff Wilson <jeff@jeffalwilson.com>
#
# This config file is not a standard Flexget config, it is used
# to sort my unrared movies and TV shows into their proper place
#

# Use the secrets plugin to separately store credentials, etc
secrets: secretfile.yml
templates:
  global:
    # Each feed must be run manually
    manual: yes
    # Disable seen, alway process files
    disable: [seen, remember_rejected, retry_failed]
    accept_all: yes
    # Make sure all filenames are Windows safe (for samba)
    pathscrub: windows
    find:
      path: '/tmp'
      # We are looking for any video files that were extracted
      regexp: '.*\.(avi|mkv|mpg|mp4|m4v)$'
      recursive: yes
    regexp:
      reject:
        - \bsample\b: {from: title}
    content_size:
      min: 52

tasks:
  Sort_Unpacked_TV_Shows:
    # Where to get the unpacked (staged) files from
    find:
      path: '/media/data/mythtv/videos/unrar/staging/tv_shows/'
    thexem:
      source: scene
      destination: tvdb
    # Where to get the metadata
    thetvdb_lookup: yes
    # This is needed to get my season offset values
    include:
      - series-favorite.yml
      - series-following.yml
      - series-daily.yml
    sequence:
      - configure_series:
          settings:
            tracking: no
          from:
            trakt_list:
              username: '{{ secrets.trakt.username }}'
              password: '{{ secrets.trakt.password }}'
              list: Favorite TV
              type: shows
              strip_dates: yes
      - configure_series:
          settings:
            tracking: no
          from:
            trakt_list:
              username: '{{ secrets.trakt.username }}'
              password: '{{ secrets.trakt.password }}'
              list: Following TV
              type: shows
              strip_dates: yes
      - configure_series:
          settings:
            tracking: no
          from:
            trakt_list:
              username: '{{ secrets.trakt.username }}'
              password: '{{ secrets.trakt.password }}'
              list: Daily TV
              type: shows
              strip_dates: yes
    all_series:
      # Don't actually filter
      parse_only: yes
    # Don't attempt to move if we don't have valid metadata
    require_field: [tvdb_series_name, series_id]
    move:
      # Folder to move to
      to: >
        /media/data/mythtv/videos/TV/{{ tvdb_series_name|default(series_name)|replace('/', '_')|replace(':', ' -')|replace(',', '') }}/{% if series_id_type == 'ep' %}Season {{ (tvdb_season|default(series_season))|pad(2) }}/{% endif %}
      # Filename (inside of folder) to move to
      filename: >
        {{ tvdb_series_name|default(series_name)|replace('/', '_')|replace(':', ' -')|replace(',', '') }} - {% if series_id_type == 'ep' and thetvdb_lookup_season_offset|default(False) %}{{ "S%0.2dE%0.2d"|format((series_season + thetvdb_lookup_season_offset),series_episode) }}{% else %}{{ series_id }}{% endif %}{% if ep_name|default(False) %} - {{ ep_name|replace('/', '_')|replace(':', ' -')|replace(',', '') }}{% endif %} - {{ quality }}.{{ location[-3:] }}
      clean_source: 40
    if:
      - movedone:
          set:
            path: '{{ movedone }}'

  Sort_Unpacked_TV_Premieres:
    # Where to get the unpacked (staged) files from
    find:
      path: '/media/data/mythtv/videos/unrar/staging/tv_premieres/'
    # Where to get the metadata
    thetvdb_lookup: yes
    all_series:
      # Don't actually filter
      parse_only: yes
      # parse_only still filters propers
      propers: yes
    # Don't attempt to move if we don't have valid metadata
    require_field: [tvdb_series_name, series_id]
    # Troublesome series
    series:
      - "Youre the Worst":
          name_regexp: ^you'?re.the.worst
          set:
            tvdb_id: 281776
    move:
      # Folder to move to
      to: >
        /media/data/mythtv/videos/premieres/{{ tvdb_series_name|default(series_name)|replace('/', '_')|replace(':', ' -')|replace(',', '') }}/{% if series_id_type == 'ep' %}Season {{ (tvdb_season|default(series_season))|pad(2) }}/{% endif %}
      # Filename (inside of folder) to move to
      filename: >
        {{ tvdb_series_name|default(series_name)|replace('/', '_')|replace(':', ' -')|replace(',', '') }} - {% if series_id_type == 'ep' and thetvdb_lookup_season_offset|default(False) %}{{ "S%0.2dE%0.2d"|format((series_season + thetvdb_lookup_season_offset),series_episode) }}{% else %}{{ series_id }}{% endif %}{% if ep_name|default(False) %} - {{ ep_name|replace('/', '_')|replace(':', ' -')|replace(',', '') }}{% endif %} - {{ quality }}.{{ location[-3:] }}
      clean_source: 40

  # Same as above
  Sort_Unpacked_Movies:
    find:
      path: '/media/data/mythtv/videos/unrar/staging/movies/'
    imdb_lookup: yes
    tmdb_lookup: yes
    # Rotten Tomatoes is broken, possibly forever :(
    #rottentomatoes_lookup: '{{ secrets.rottentomatoes.api_key }}'
    proper_movies: yes
    require_field: [movie_name, movie_year]
    move:
      to: >
        "/media/data2/mythtv/videos/movies/_Movies/{{ imdb_name|replace('/', '_')|replace(':', ' -')|replace(',', '') }} ({{ imdb_year }})/"
      filename: >
        {{ imdb_name|replace('/', '_')|replace(':', ' -')|replace(',', '') }} ({{ imdb_year }}) - {{ quality }}.{{ location[-3:] }}
      clean_source: 1000
      along:
        - srt
